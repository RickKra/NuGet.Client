name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
phases:

- phase: Initialize_Build
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 60
    demands: 
      - DotNetFramework
      - msbuild
  
  steps:
  - task: PowerShell@1
    displayName: "Update Build Number"
    name: "updatebuildnumber"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $revision = Get-Content $env:BUILDCOUNTERFILE
        $newBuildCounter = [System.Decimal]::Parse($revision)
        $newBuildCounter++
        Set-Content $env:BUILDCOUNTERFILE $newBuildCounter
        Write-Host "##vso[build.updatebuildnumber]$newBuildCounter"
        Write-Host "##vso[task.setvariable variable=BuildNumber;isOutput=true]$newBuildCounter"

- phase: Build_and_UnitTest
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 90
    demands: 
      - DotNetFramework
      - msbuild

  steps:  
  - task: PowerShell@1
    displayName: "Update Build Number"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:BuildNumber"
        gci env:* | sort-object name

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CI"
    displayName: "Run Configure.ps1"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
      arguments: "-BuildCounterFile $(BuildCounterFile) -BuildInfoJsonFile $(BuildInfoJsonFile) -BuildRTM false -SkipUpdateBuildNumber"
    displayName: "Configure VSTS CI Environment"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        gci env:* | sort-object name

  - task: MicroBuildLocalizationPlugin@2
    displayName: "Install Localization Plugin"
    inputs:
      feedSource: "https://devdiv-test.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json"

  - task: MicroBuildSigningPlugin@2
    displayName: "Install Signing Plugin"
    inputs:
      signType: "$(SigningType)"
      esrpSigning: "true"
      feedSource: "https://devdiv-test.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json"

  - task: MicroBuildSwixPlugin@2
    displayName: "Install Swix Plugin"
    inputs:
      feedSource: "https://devdiv-test.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber) /p:BuildRTM=false /v:m"

  - task: MSBuild@1
    displayName: "Build for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15NoVSIX /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk /p:BuildRTM=false /p:BuildNumber=$(BuildNumber) /bl:$(Build.StagingDirectory)\\binlogs\\build.binlog"

  - task: MSBuild@1
    displayName: "Localize Assemblies"
    inputs:
      solution: "build\\loc.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild /bl:$(Build.StagingDirectory)\\binlogs\\loc.binlog"

  - task: MSBuild@1
    displayName: "Pack Nupkgs"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Pack /p:BuildRTM=false /p:ExcludeTestProjects=false /p:BuildNumber=$(BuildNumber) /bl:$(Build.StagingDirectory)\\binlogs\\pack.binlog"

  - task: MSBuild@1
    displayName: "Pack VSIX"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15VSIX /p:BuildRTM=false /p:ExcludeTestProjects=false /p:IsCIBuild=true /bl:$(Build.StagingDirectory)\\binlogs\\vsix.binlog"

  - task: MSBuild@1 
    displayName: "Generate Build Tools package" 
    inputs: 
      solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj" 
      msbuildVersion: "15.0" 
      configuration: "$(BuildConfiguration)" 
      msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true /bl:$(Build.StagingDirectory)\\binlogs\\tools.binlog" 

  - task: MSBuild@1
    displayName: "Generate VSMAN file for NuGet Core VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/bl:$(Build.StagingDirectory)\\binlogs\\core.binlog"

  - task: MSBuild@1
    displayName: "Generate VSMAN file for Build Tools VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/bl:$(Build.StagingDirectory)\\binlogs\\vsman.binlog"

  - task: PowerShell@1
    displayName: "Create EndToEnd Test Package"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
      arguments: "-c $(BuildConfiguration) -tv 15 -out $(Build.Repository.LocalPath)\\artifacts\\VS15"
      failOnStandardError: "false"

  - task: PowerShell@1
    displayName: "Validate VSIX Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM false -BuildOutputTargetPath $(BuildOutputTargetPath) -ValidateVsix"
  
  - task: PowerShell@1
    displayName: "Validate Repository Artifacts Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM false -BuildOutputTargetPath $(BuildOutputTargetPath)"

  - task: PublishBuildArtifacts@1
    displayName: "Publish BinLogs"
    inputs:
      PathtoPublish: "$(Build.StagingDirectory)\\binlogs"
      ArtifactName: "binlogs"
      ArtifactType: "Container"
    condition: "always()"

  - task: MicroBuildCleanup@1
    displayName: "Send Telemetry"

  - task: PowerShell@1
    displayName: "Cleanup on Failure"
    inputs:
      scriptType: "inlineScript"
      arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
      inlineScript: |
        param([string]$BuildOutputTargetPath)
        Get-ChildItem $(BuildOutputTargetPath) -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        Remove-Item -Path $(BuildOutputTargetPath) -Force -Recurse -ErrorAction SilentlyContinue
    condition: "eq(variables['Agent.JobStatus'], 'Failed')"
